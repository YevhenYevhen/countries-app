{"version":3,"sources":["utilities/queryFetch.js","utilities/useToggle.jsx","Components/Country.jsx","Components/Countries.jsx","Components/Continent.jsx","utilities/getContinentCountries.js","Components/Continets.jsx","App.js","reportWebVitals.js","index.js"],"names":["queryFetch","query","variables","fetch","method","headers","body","JSON","stringify","then","res","json","Country","name","capital","languages","initialState","useState","state","setState","toggle","useCallback","useToggle","infoMode","toggleInfoMode","onClick","className","Countries","countries","toggleIsCollapsed","isCollapsed","useContext","isCollapsedContext","map","country","reduce","langArray","langObj","push","join","code","Continent","continentCode","setCountries","useEffect","data","continent","getContinentCountries","countriesDisplay","toggleCountriesDisplay","Continents","continents","setContinents","React","createContext","App","Provider","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79ee7c6a.chunk.js","sourcesContent":["export default function queryFetch(query, variables) {\n    return fetch('https://countries.trevorblades.com/', {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n            query: query,\n            variables: variables\n        })\n    }).then(res => res.json())\n}","import { useCallback, useState } from \"react\";\n\nexport const useToggle = (initialState = false) => {\n    const [state, setState] = useState(initialState);\n    const toggle = useCallback(() => setState(state => !state), []);\n    \n    return [state, toggle]\n}","import React from 'react'\nimport '../App.css'\nimport { useToggle } from '../utilities/useToggle'\n\nexport const Country = ({ name, capital, languages }) => {\n    const [infoMode, toggleInfoMode] = useToggle()\n    return (\n        <>\n         <div onClick={toggleInfoMode} className='country'>\n            <div>{name}</div>\n            </div>\n            {infoMode && <div onClick={toggleInfoMode} className='countryInfo'>\n                <div><span>Capital:</span><span>{capital}</span></div> \n                <div><span>Languages:</span><span>{languages}</span></div>\n            </div>}\n        </>\n    )\n}\n","import React, { useContext } from 'react'\nimport { isCollapsedContext } from '../App'\nimport '../App.css'\nimport { Country } from './Country'\n\n\nexport const Countries = ({ countries, toggleIsCollapsed }) => {\n    const isCollapsed = useContext(isCollapsedContext)\n    return (\n        <>\n            {!isCollapsed && <div>\n                {countries.map(country => {\n                    \n                    let languages = country.languages.reduce((langArray, langObj) => {\n                        langArray.push(langObj.name)\n                        return langArray;\n                    }, []).join(', ')\n                \n                    languages = languages || 'No languages'\n                    const capital = country.capital || 'No capital'\n\n                    return <Country key={country.code}\n                        name={country.name} isCollapsed={isCollapsed}\n                        languages={languages} capital={capital} />\n                })}\n                <div className='collapser' onClick={toggleIsCollapsed} >Back to continents</div>\n            </div>\n            }\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState } from 'react'\nimport { Countries } from './Countries'\nimport getContinentCountries from \"../utilities/getContinentCountries\"\nimport { isCollapsedContext } from '../App'\n\n\n export const Continent = ({ name, continentCode, toggleIsCollapsed }) => {\n     const [countries, setCountries] = useState([])\n     \n     useEffect(() => {\n        getContinentCountries(continentCode).then(res => setCountries(res))\n     }, [continentCode])\n     \n    const [countriesDisplay, toggleCountriesDisplay] = useState(false);\n     const isCollapsed = useContext(isCollapsedContext)\n     \n    const toggle = () => {\n        toggleIsCollapsed(false)\n        toggleCountriesDisplay(!countriesDisplay)\n    }\n  \n     useEffect(() => {\n         if (isCollapsed) {\n            toggleCountriesDisplay(false)\n        }\n    }, [isCollapsed])\n     \n   \n\n    return (\n        <>\n            <div className='continent' onClick={toggle}>{name}</div>\n            {countriesDisplay && <Countries toggleCountriesDisplay={toggleCountriesDisplay}\n                toggleIsCollapsed={toggleIsCollapsed} countries={countries} />}\n        </>\n    )\n}\n\n \n\n\n\n\n","import queryFetch from \"./queryFetch\"\n\nexport default function getContinentCountries(continentCode) {\n    return queryFetch(`\n     query getCountries($code: ID!) {\n         continent(code: $code) {\n           countries{\n             name\n             code\n             capital\n             languages {\n                code\n                name\n              }\n           }\n         }\n       }\n     `, { code: continentCode }).then(data => {\n         return data.data.continent.countries\n     })\n }","import { useEffect, useState } from \"react\"\nimport queryFetch from '../utilities/queryFetch'\nimport { Continent } from './Continent'\n\n\nconst Continents = ({toggleIsCollapsed}) => {\n\n    const [continents, setContinents] = useState([])\n\n    useEffect(() => {\n        queryFetch(`\n        query {\n            continents {\n            name\n            code\n            }\n        }\n    `\n        )\n            .then(data => {\n                setContinents(data.data.continents)\n            })\n    }, [])\n\n    return (\n        continents.map(continent => <Continent toggleIsCollapsed={toggleIsCollapsed}\n            key={continent.code} continentCode={continent.code} name={continent.name} />)\n    )\n\n}\nexport default Continents;\n\n\n","import React, { useState } from 'react'\nimport './App.css';\nimport Continents from './Components/Continets'\n\nexport const isCollapsedContext = React.createContext()\n\nfunction App() {\n  const [isCollapsed, toggleIsCollapsed] = useState(true)\n  \n  return (\n    <div className='wrapper'>\n      <isCollapsedContext.Provider value={isCollapsed}>\n      <Continents isCollapsed={isCollapsed} toggleIsCollapsed={toggleIsCollapsed} />\n      </isCollapsedContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}